{"version":3,"sources":["assets/jackson-hendry-eodA_8CTOFo-unsplash.jpg","assets/chuttersnap-TSgwbumanuE-unsplash.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setWeather","city","setcity","lat","JSON","parse","localStorage","getItem","long","isBright","setIsDark","document","querySelector","className","useEffect","time","Date","getHours","axios","get","then","res","newWeather","data","catch","err","alert","navigator","geolocation","getCurrentPosition","position","setItem","coords","latitude","longitude","class","type","onClick","placeholder","id","getElementById","value","name","description","main","temp","humidity","wind","speed","temp_min","temp_max","coord","lon","sys","country","feels_like","pressure","deg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.654c9ad9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/jackson-hendry-eodA_8CTOFo-unsplash.d2e60154.jpg\";","export default __webpack_public_path__ + \"static/media/chuttersnap-TSgwbumanuE-unsplash.714d7872.jpg\";","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './index.css';\nimport pic1 from './assets/jackson-hendry-eodA_8CTOFo-unsplash.jpg'\nimport pic2 from './assets/chuttersnap-TSgwbumanuE-unsplash.jpg';\n\nfunction App() {\n    const [weather, setWeather] = useState(null);\n    const [city,setcity] = useState(null);\n    let lat = JSON.parse(localStorage.getItem('lat'))\n    let long = JSON.parse(localStorage.getItem('long'))\n    const [isBright, setIsDark] =useState(true);\n    const [isB, setIsD] =useState(true);\n  //   const display = document.querySelector('body');\n  // display.className = isBright ? \"Bright\" : \"Dark\";\n\n  const display = document.querySelector('body');\n  display.className = isBright ? \"Bright\" : \"Dark\";\n  const theme = () => {\n  //   const display = document.querySelector('body');\n  // display.className = isBright ? \"Bright\" : \"Dark\";\n    setIsDark(!isBright);\n    \n  }\n\n  // var main=document.getElementById(\"main\")\n    useEffect(()=>{\n      let date = new Date();\n      let time = date.getHours();\n \n      // let display2=document.querySelector('body');\n      //    display2.className = isB ? \"Darkmain\" : \"Brightmain\";\n        if(time>=19 || time<6){\n          // document.querySelector('.Darkmain');\n          const display = document.querySelector('body');\n          display.className = isBright ? \"Bright\" : \"Dark\";\n            setIsDark(!isBright);\n            \n\n          \n          // setIsD(!isB)\n          // setIsDark(!isBright)\n          // setIsDark(!isBright)\n          \n          \n        // }\n        // else{\n        //   theme()\n        //   setIsD(true)\n          // document.querySelector('#Brightmain');\n          // setIsD(isB)\n          // if(time<19 || time>6){\n          // main.innerHTML=`<img src=${pic2} alt=\"asd\" width=\"200px\" height=\"200px\"/>`\n          // console.log(\"data\")\n          }\n          \n        \n    if(city != null){\n              axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&&appid=0c702b3dffad340f5e1890bd9eeb5d0f&units=metric`)\n              .then((res) => {\n                  const newWeather = res.data;\n                  setWeather(newWeather);\n              }).catch((err)=>{alert(\"invalid city name\")})\n            }\n            else \n            if (navigator.geolocation) {\n              navigator.geolocation.getCurrentPosition(showPosition);\n              function showPosition(position) {\n                localStorage.setItem('lat', position.coords.latitude)\n                localStorage.setItem('long', position.coords.longitude)\n                axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&&appid=0c702b3dffad340f5e1890bd9eeb5d0f&units=metric`)\n                .then((res) => {\n                    const newWeather = res.data;\n                    setWeather(newWeather);\n                }).catch((err)=>{alert(\"location is turned off\")})\n                }\n            } else { \n              alert(\"please turn on your location\")\n            }\n          }\n          ,[city])\n    \n        return (<div>\n          {/* <img src={pic1} alt=\"Moon\" id=\"Darkmain\"/>  */}\n          {/* <img src={pic2} alt=\"Moon\" id=\"brightmain\"/>  */}\n          {\n          \n        (weather !== null) ?\n          <>\n          <label class=\"switch\">\n        <input type=\"checkbox\"></input>\n        <span onClick={theme} class=\"slider round\"> </span>\n      </label>\n          <input class=\"searchBar\" placeholder=\"Enter city\" id=\"city\"/>\n            <button class=\"searchBtn\" onClick={()=>{\n                setcity(document.getElementById('city').value);\n             \n                }}>Search</button>\n                \n            <h1 id=\"wName\">{weather.name}</h1>\n            <h2 id=\"wDescription\">{weather?.weather[0].description}</h2>\n            <h1 id=\"wTemp\">{weather?.main?.temp} <span id=\"degree\">°C</span></h1>\n            <div class=\"humwind\">\n            <h3 id=\"Humidity\">Humidity: {weather?.main?.humidity} g/kg &nbsp;&nbsp;&nbsp;&nbsp; </h3>\n            <h3 id=\"wWindspeed\">  Wind Speed: {weather?.wind.speed} m/s</h3>\n            </div>\n        <br></br>\n        <div id=\"dtl\">\n            <div class=\"detail\">\n            <h6>Min Temperature : {weather.main.temp_min}°C</h6>\n            <h6>Max Temperature : {weather.main.temp_max}°C</h6>\n            </div>\n            <div class=\"detail\">\n            <h6>Latitude: {weather.coord.lat}</h6>\n            <h6>Longitude: {weather.coord.lon}</h6>\n            </div>\n            <div class=\"detail\">\n            <h6>Country : {weather.sys.country}</h6>\n            <h6>Feels Like : {weather.main.feels_like}°C</h6>\n            </div>\n            <div class=\"detail\">\n            <h6>Pressure : {weather.main.pressure} Pa</h6>\n            <h6>Wind Direction : {weather.wind.deg} °</h6>\n            </div>\n           \n            </div> \n            <br></br> \n            <br></br>\n                 \n          </>\n          :\n          <div class=\"loader\"></div>\n\n         \n      }\n     \n      \n        </div>)\n}\n    \nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}